steps:

- name: 'gcr.io/cloud-builders/gcloud'
  id: Deploy
  entrypoint: '/bin/bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials ${_CLOUDSDK_CONTAINER_CLUSTER} --zone ${_CLOUDSDK_COMPUTE_REGION}
    kubectl kustomize overlays/stage | kubectl apply -f -
  
- name: 'gcr.io/cloud-builders/git'
  secretEnv: ['SSH_KEY']
  entrypoint: 'bash'
  args:
  - -c
  - |
    echo "$$SSH_KEY" >> /root/.ssh/id_rsa
    chmod 400 /root/.ssh/id_rsa
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

- name: 'gcr.io/cloud-builders/git'
  id: Copy to production branch
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    # Set to use ssh
    git remote set-url origin git@github.com:khhini/riset-devsecops-sample-app-env.git
    # Configure Git to create commits with Cloud Build's service account
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')
    git fetch origin kustomize && git checkout kustomize
    # update production kustomization manifest
    sed -i "s#newTag:.*#$(echo $(grep newTag overlays/stage/kustomization.yaml))#g" overlays/prod/kustomization.yaml
    git add overlays/prod/kustomization.yaml
    # Commit the kubernetes.yaml file with a descriptive commit message
    git commit -m "Manifest from commit $COMMIT_SHA
    $(git log --format=%B -n 1 $COMMIT_SHA)"
    # Push the changes back to Cloud Source Repository
    git push origin kustomize
  volumes:
  - name: 'ssh'
    path: /root/.ssh

availableSecrets:
  secretManager:
  - versionName: projects/1078293032607/secrets/github_ssh_keys/versions/1
    env: 'SSH_KEY'

substitutions:
  _CLOUDSDK_COMPUTE_REGION: asia-southeast2
  _CLOUDSDK_CONTAINER_CLUSTER: khhini-cluster